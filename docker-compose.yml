version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: dataops-postgres
    environment:
      POSTGRES_DB: dataops_monitoring
      POSTGRES_USER: dataops
      POSTGRES_PASSWORD: dataops_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dataops-network
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: dataops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dataops-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dataops-backend
    environment:
      - DATABASE_URL=postgresql://dataops:dataops_password@postgres:5432/dataops_monitoring
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-change-in-production
      - FLASK_APP=run.py
      - FLASK_ENV=production
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - dataops-network
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 run:app

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dataops-celery
    environment:
      - DATABASE_URL=postgresql://dataops:dataops_password@postgres:5432/dataops_monitoring
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-change-in-production
      - FLASK_APP=run.py
      - FLASK_ENV=production
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - dataops-network
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info --concurrency=4

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dataops-celery-beat
    environment:
      - DATABASE_URL=postgresql://dataops:dataops_password@postgres:5432/dataops_monitoring
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-change-in-production
      - FLASK_APP=run.py
      - FLASK_ENV=production
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - dataops-network
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dataops-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - dataops-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: dataops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - dataops-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  celery_logs:

networks:
  dataops-network:
    driver: bridge 